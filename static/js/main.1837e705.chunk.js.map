{"version":3,"sources":["Components/Dropdown/DropdownButton/DropdownButton.tsx","Components/Dropdown/DropdownList/DropdownList.tsx","Components/Dropdown/Dropdown.tsx","Components/Form/Form.tsx","App.tsx","index.tsx"],"names":["DropdownButton","isSelected","value","placeholder","disabled","setOpen","dropdownRef","useRef","useState","isDropdownFocused","setDropdownFocused","useEffect","document","addEventListener","event","key","handleClickOutside","current","contains","target","removeEventListener","ref","type","className","classNames","onClick","prevOpen","onBlur","setTimeout","onFocus","length","DropdownList","options","setIsSelected","setValue","onChange","sortedOptions","sort","a","b","localeCompare","map","option","href","item","preventDefault","handleItemClick","Dropdown","defaultValue","isOpened","dropdownValue","countries","USA","Estonia","Ukraine","Form","isSuccess","setIsSuccess","selectedCountry","setSelectedCountry","useForm","register","handleSubmit","errors","formState","watch","action","method","onSubmit","htmlFor","firstName","message","id","required","pattern","lastName","email","validate","containsRussianLetters","test","country","Object","keys","shouldValidate","city","address","zipCode","format","phone","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1837e705.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  isSelected: boolean,\n  value: string,\n  placeholder: string,\n  disabled: boolean,\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const DropdownButton: React.FC<Props> = ({\n  isSelected,\n  value,\n  placeholder,\n  disabled,\n  setOpen,\n}) => {\n  const dropdownRef = useRef<HTMLButtonElement>(null);\n  const [isDropdownFocused, setDropdownFocused] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'Escape') {\n        setOpen(false);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [setOpen]);\n\n  const handleBlur = () => {\n    setTimeout(() => {\n      if (!isDropdownFocused) {\n        setOpen(false);\n      }\n    }, 100);\n  };\n\n  return (\n    <button\n      ref={dropdownRef}\n      type=\"button\"\n      className={classNames('dropdown__button', {\n        'dropdown__button--selected': isSelected,\n        'dropdown__button--disabled': disabled,\n      })}\n      onClick={() => setOpen((prevOpen: boolean) => !prevOpen)}\n      onBlur={handleBlur}\n      onFocus={() => setDropdownFocused(true)}\n      disabled={disabled}\n    >\n      {value.length === 0 ? placeholder : value}\n    </button>\n  );\n};\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\n\ntype Props = {\n  options: string[],\n  setOpen: (param: boolean) => void,\n  setIsSelected: (param: boolean) => void,\n  setValue: (param: string) => void,\n  onChange: (param: string) => void,\n};\n\nexport const DropdownList: React.FC<Props> = ({\n  options,\n  setOpen,\n  setIsSelected,\n  setValue,\n  onChange,\n}) => {\n  const handleItemClick = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    item: string,\n  ) => {\n    event.preventDefault();\n    setOpen(false);\n    setIsSelected(true);\n    setValue(item);\n    onChange(item);\n  };\n\n  const sortedOptions = options.sort((a: string, b: string) => a.localeCompare(b));\n\n  return (\n    <ul\n      className=\"dropdown__list\"\n    >\n      {sortedOptions.map((option: string) => (\n        <li\n          key={option}\n          className=\"dropdown__list-item\"\n        >\n          <a\n            href=\"#/\"\n            className=\"dropdown__list-item-link\"\n            onClick={(event) => handleItemClick(event, option)}\n          >\n            {option}\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { DropdownButton } from './DropdownButton/DropdownButton';\nimport { DropdownList } from './DropdownList/DropdownList';\n\nimport './Dropdown.scss';\n\ntype Props = {\n  options: string[],\n  placeholder: string,\n  disabled?: boolean,\n  defaultValue: string,\n  onChange: (item: string) => void,\n};\n\nexport const Dropdown: React.FC<Props> = ({\n  options,\n  onChange,\n  placeholder,\n  defaultValue = '',\n  disabled = false,\n}) => {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isOpened, setOpen] = useState(false);\n  const [dropdownValue, setValue] = useState(defaultValue);\n\n  useEffect(() => {\n    setValue(defaultValue);\n\n    if (defaultValue.length === 0) {\n      setIsSelected(false);\n    }\n  }, [defaultValue]);\n\n  return (\n    <div className=\"dropdown\">\n      <DropdownButton\n        isSelected={isSelected}\n        setOpen={setOpen}\n        value={dropdownValue}\n        placeholder={placeholder}\n        disabled={disabled}\n      />\n\n      {isOpened && (\n        <DropdownList\n          options={options}\n          setOpen={setOpen}\n          setIsSelected={setIsSelected}\n          setValue={setValue}\n          onChange={onChange}\n        />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React, { useState } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\n\nimport { Dropdown } from '../Dropdown/Dropdown';\n\nimport './Form.scss';\n\nconst countries: { [key: string]: string[] } = {\n  USA: ['New York', 'Los Angeles'],\n  Estonia: ['Johvi', 'Tallinn'],\n  Ukraine: ['Kyiv', 'Dnipro'],\n};\n\ntype Inputs = {\n  firstName: string,\n  lastName: string,\n  email: string,\n  country: string,\n  city: string,\n  address: string,\n  zipCode: string,\n  phone: string,\n};\n\nexport const Form: React.FC = () => {\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState('');\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm<Inputs>();\n  const handleCountryChange = (item: string) => {\n    setSelectedCountry(item);\n    setValue('country', item, { shouldValidate: true });\n    setValue('city', '', { shouldValidate: true });\n  };\n\n  const onReset = () => {\n    setValue('firstName', '');\n    setValue('lastName', '');\n    setValue('email', '');\n    setValue('country', '');\n    setValue('city', '');\n    setValue('address', '');\n    setValue('zipCode', '');\n    setValue('phone', '');\n    setSelectedCountry('');\n  };\n\n  const onSubmit: SubmitHandler<Inputs> = () => {\n    setIsSuccess(true);\n    onReset();\n  };\n\n  return (\n    <>\n      <form\n        action=\"#\"\n        method=\"POST\"\n        className=\"form\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <label className=\"form__label\" htmlFor=\"firstName\">\n          {errors.firstName && errors.firstName.type === 'required' && (\n            <p className=\"form__input-error\">\n              First name is required\n            </p>\n          )}\n\n          {errors.firstName && errors.firstName.type === 'pattern' && (\n            <p className=\"form__input-error\">\n              {errors.firstName.message}\n            </p>\n          )}\n\n          <input\n            className=\"form__input\"\n            placeholder=\"First name\"\n            id=\"firstName\"\n            {...register('firstName', {\n              required: 'required',\n              pattern: {\n                value: /^[A-Za-z]+$/,\n                message: 'Please, enter only English letters without digits',\n              },\n            })}\n          />\n        </label>\n\n        <label className=\"form__label\" htmlFor=\"lastName\">\n          {errors.lastName && errors.lastName.type === 'required' && (\n            <p className=\"form__input-error\">\n              Last name is required\n            </p>\n          )}\n\n          {errors.firstName && errors.firstName.type === 'pattern' && (\n            <p className=\"form__input-error\">\n              {errors.lastName?.message}\n            </p>\n          )}\n\n          <input\n            className=\"form__input\"\n            placeholder=\"Last name\"\n            id=\"lastName\"\n            {...register('lastName', {\n              required: 'required',\n              pattern: {\n                value: /^[A-Za-z]+$/,\n                message: 'Please, enter only English letters without digits',\n              },\n            })}\n          />\n        </label>\n\n        <label className=\"form__label\" htmlFor=\"email\">\n          {errors.email && errors.email.type === 'required' && (\n            <p className=\"form__input-error\">\n              Email is required\n            </p>\n          )}\n\n          {errors.email && errors.email.type === 'pattern' && (\n            <p className=\"form__input-error\">\n              {errors.email?.message}\n            </p>\n          )}\n\n          {errors.email && errors.email.type === 'containsRussianLetters' && (\n            <p className=\"form__input-error\">\n              Email should not contain russian letters\n            </p>\n          )}\n\n          <input\n            className=\"form__input\"\n            placeholder=\"Email\"\n            id=\"email\"\n            {...register('email', {\n              required: 'required',\n              pattern: {\n                value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                message: 'Email did not match required format',\n              },\n              validate: {\n                containsRussianLetters: value => !/[\\u0400-\\u04FF]/.test(value),\n              },\n            })}\n          />\n        </label>\n\n        <label htmlFor=\"country\" className=\"form__label\">\n          {errors.country && errors.country.type === 'required' && (\n            <p className=\"form__input-error\">\n              Country is required\n            </p>\n          )}\n\n          <Dropdown\n            options={Object.keys(countries)}\n            placeholder=\"Select country\"\n            onChange={handleCountryChange}\n            defaultValue={watch().country}\n          />\n\n          <input\n            className=\"form__input form__input--hidden\"\n            id=\"country\"\n            {...register('country', {\n              required: 'required',\n            })}\n            onChange={(event) => setSelectedCountry(event.target.value)}\n          />\n        </label>\n\n        <label htmlFor=\"city\" className=\"form__label\">\n          {errors.city && errors.city.type === 'required' && (\n            <p className=\"form__input-error\">\n              City is required\n            </p>\n          )}\n\n          <Dropdown\n            disabled={!selectedCountry}\n            options={countries[selectedCountry]}\n            placeholder=\"Select city\"\n            defaultValue={watch().city}\n            onChange={(item: string) => setValue('city', item, { shouldValidate: true })}\n          />\n\n          <input\n            className=\"form__input form__input--hidden\"\n            id=\"city\"\n            {...register('city', {\n              required: 'required',\n            })}\n          />\n        </label>\n\n        <label className=\"form__label\" htmlFor=\"address\">\n          {errors.address && errors.address.type === 'required' && (\n            <p className=\"form__input-error\">\n              Adress is required\n            </p>\n          )}\n\n          {errors.address && errors.address.type === 'pattern' && (\n            <p className=\"form__input-error\">\n              {errors.address?.message}\n            </p>\n          )}\n\n          <input\n            className=\"form__input\"\n            placeholder=\"Address\"\n            id=\"address\"\n            {...register('address', {\n              required: 'required',\n              pattern: {\n                value: /^[A-Za-z]+$/,\n                message: 'Please, enter only English letters without digits',\n              },\n            })}\n          />\n        </label>\n\n        <label className=\"form__label\" htmlFor=\"zipCode\">\n          {errors.zipCode && errors.zipCode.type === 'required' && (\n            <p className=\"form__input-error\">\n              ZIP Code is required\n            </p>\n          )}\n\n          {errors.zipCode && errors.zipCode.type === 'pattern' && (\n            <p className=\"form__input-error\">\n              {errors.zipCode?.message}\n            </p>\n          )}\n\n          {errors.zipCode && errors.zipCode.type === 'format' && (\n            <p className=\"form__input-error\">\n              ZIP Code must be 6 characters\n            </p>\n          )}\n\n          <input\n            className=\"form__input\"\n            placeholder=\"ZIP Code\"\n            id=\"zipCode\"\n            {...register('zipCode', {\n              required: 'required',\n              pattern: {\n                value: /^[0-9]+$/,\n                message: 'Please, enter only digits',\n              },\n              validate: {\n                format: (value) => value.length === 6,\n              },\n            })}\n          />\n        </label>\n\n        <label className=\"form__label\" htmlFor=\"phone\">\n          {errors.phone && errors.phone.type === 'required' && (\n            <p className=\"form__input-error\">\n              Phone number is required\n            </p>\n          )}\n\n          {errors.phone && errors.phone.type === 'pattern' && (\n            <p className=\"form__input-error\">\n              {errors.phone?.message}\n            </p>\n          )}\n\n          <input\n            className=\"form__input\"\n            placeholder=\"Phone number\"\n            id=\"phone\"\n            {...register('phone', {\n              required: 'required',\n              pattern: {\n                value: /^\\d{3}-\\d{4}$/,\n                message: 'Phone number did not match required format: 000-0000',\n              },\n            })}\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n          className=\"form__button\"\n        >\n          Submit\n        </button>\n      </form>\n\n      {isSuccess && (\n        <p\n          className=\"form__success\"\n        >\n          All field are correct! Well done!\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Form } from './Components/Form/Form';\n\nimport './App.scss';\n\nexport const App: React.FC = () => (\n  <div className=\"App\">\n    <Form />\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}